#!/bin/sh

[ -z "$1" ] && echo "Please run '$0 PRODUCT_NAME' to start build (see 'configs/templates/') " && exit 1 

if [ ! -f configs/templates/$1.config ] ; then
	echo "configs/templates/$1.config not found "
	exit 1
fi
sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' configs/templates/$1.config
cp -f configs/templates/$1.config .config

ROOTDIR=`pwd`
export ROOTDIR=$ROOTDIR

kernel_id="3.4.x"
kernel_cf=""
kernel_tf=""
uclibc_id="0.9.33.2"
uclibc_cf=""
uclibc_tf="$ROOTDIR/libc/uClibc-${uclibc_id}/.config"
busybox_id="1.24.x"
busybox_cf="$ROOTDIR/configs/boards/busybox.config"
busybox_tf="$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
board_h=""
board_mk=""
paragon_hfsplus=0

func_enable_kernel_param()
{
	if [ -n "`grep \^\"\# $1 is not set\" $kernel_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $kernel_tf
	fi
}

func_disable_kernel_param()
{
	if [ -n "`grep \^$1=y $kernel_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $kernel_tf
	elif [ -n "`grep \^$1=m $kernel_tf`" ] ; then
		sed -i "s/$1=m/\# $1 is not set/" $kernel_tf
	fi
}

func_disable_libc_param()
{
	if [ -n "`grep \^$1=y $uclibc_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $uclibc_tf
	fi
}

func_enable_busybox_param()
{
	if [ -n "`grep \^\"\# $1 is not set\" $busybox_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $busybox_tf
	fi
}

func_disable_busybox_param()
{
	if [ -n "`grep \^$1=y $busybox_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $busybox_tf
	fi
}

if [ ! -f "$ROOTDIR/.config" ] ; then
	cp -fv "$ROOTDIR/configs/templates/n56u_dlna.config" "$ROOTDIR/.config"
fi

if [ ! -f "$ROOTDIR/.config" ] ; then
	echo "Project config file .config not found! Terminate."
	exit 1
fi

# load project root config
. $ROOTDIR/.config

if [ ! -f "$ROOTDIR/vendors/Ralink/$CONFIG_PRODUCT/config.arch" ] ; then
	echo "Project product dir ($CONFIG_PRODUCT) not found! Terminate."
	exit 1
fi

if [ ! -d "$ROOTDIR/$CONFIG_LINUXDIR" ] ; then
	echo "Project Linux Kernel dir ($CONFIG_LINUXDIR) not found! Terminate."
	exit 1
fi

board_h="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.h"
board_mk="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.mk"
uclibc_cf="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/libc.config"
kernel_cd="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID"
kernel_tf="$ROOTDIR/$CONFIG_LINUXDIR/.config"

if [ "$CONFIG_LINUXDIR" = "linux-3.0.x" ] ; then
	kernel_id="3.0.x"
fi

if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.ram.config"
else
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.config"
fi

if [ ! -f "$kernel_cf" ] ; then
	echo "Target kernel config ($kernel_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$uclibc_cf" ] ; then
	echo "Target uClibc config ($uclibc_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$busybox_cf" ] ; then
	echo "Target BusyBox config ($busybox_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_h" ] ; then
	echo "Target board header ($board_h) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_mk" ] ; then
	echo "Target board descriptor ($board_mk) not found! Terminate."
	exit 1
fi

rm -rf $ROOTDIR/romfs
rm -rf $ROOTDIR/images
mkdir -p $ROOTDIR/romfs
mkdir -p $ROOTDIR/images

# load source kernel config
. "$kernel_cf"

echo --------------------------COPY-CONFIG-----------------------------
######################### FOR-ALL-DEVICES #############################
ln -sf vendors/Ralink/$CONFIG_PRODUCT/config.arch config.arch
cp -fL "$kernel_cf" "$kernel_tf"
cp -fL "$uclibc_cf" "$uclibc_tf"
cp -fL "$busybox_cf" "$busybox_tf"
cp -fL "$board_mk" "$ROOTDIR/user/shared/board.mk"
cp -fL "$board_h" "$ROOTDIR/user/shared/include/ralink_board.h"
############################# WI-FI ###################################
dir_wifi_src="$ROOTDIR/proprietary/rt_wifi"
dir_wifi_dst="$ROOTDIR/$CONFIG_LINUXDIR/drivers/net/wireless/ralink"
dir_wifi_ver="2.7.X.X"
rm -rf "$dir_wifi_dst/rt2860v2"
rm -rf "$dir_wifi_dst/rt3090"
rm -rf "$dir_wifi_dst/rt5392"
rm -rf "$dir_wifi_dst/rt5592"
rm -rf "$dir_wifi_dst/rt3593"
rm -rf "$dir_wifi_dst/mt7610"
rm -rf "$dir_wifi_dst/mt76x2"
rm -rf "$dir_wifi_dst/mt76x3"
rm -rf "$dir_wifi_dst/mt7628"
rm -rf "$dir_wifi_dst/mt7615"
mkdir -p "$dir_wifi_dst/mt7615/embedded"
dir_wifi_ver="5.0.3.0"
if [ "$CONFIG_FIRMWARE_WIFI_DRIVER" = "4.4.2.1" ] ; then
dir_wifi_ver="4.4.2.1"
fi
cp -f "$dir_wifi_src/rtpci/$dir_wifi_ver/mt7615/embedded/Kconfig" "$dir_wifi_dst/mt7615/embedded/Kconfig"

PATCH_DIR="${ROOTDIR}/PROMETHEUS/wifi_patch"
if [ "$CONFIG_APPLY_PROMETHEUS_WIFI_DRIVER_PATCH" = "y" ] && [ ! -f "$dir_wifi_src/.patched_by_PROMETHEUS" ] ; then
	for p in $(ls ${PATCH_DIR} |sort -n) ; do
		echo "apply PROMETHEUS wifi patch: $p"
		patch -p2 -i "${PATCH_DIR}/$p"
	done
	touch "$dir_wifi_src/.patched_by_PROMETHEUS"
elif [ "$CONFIG_APPLY_PROMETHEUS_WIFI_DRIVER_PATCH" != "y" ] && [ -f "$dir_wifi_src/.patched_by_PROMETHEUS" ] ; then
	for p in $(ls ${PATCH_DIR} |sort -rn) ; do
		echo "revert PROMETHEUS wifi patch: $p"
		patch -Rp2 -i "${PATCH_DIR}/$p"
	done
	rm -f "$dir_wifi_src/.patched_by_PROMETHEUS"
fi

if [ -n "$CONFIG_RT2860V2_AP" ] ; then
	dir_wifi_ver="2.7.X.X"
	if [ "$CONFIG_RALINK_RT3883" = "y" ] && [ "$CONFIG_FIRMWARE_WIFI5_DRIVER" = "2.4" ] ; then
		dir_wifi_ver="2.4.X.X"
	fi
	if [ "$CONFIG_RALINK_MT7620" = "y" ] ; then
		if [ "$CONFIG_FIRMWARE_WIFI2_DRIVER" = "3.0" ] && [ -n "$CONFIG_MT76X2_AP" ] ; then
			func_disable_kernel_param "CONFIG_RT_FIRST_IF_RT2860"
			func_enable_kernel_param "CONFIG_RT_FIRST_IF_MT7620"
			CONFIG_RT_FIRST_IF_RT2860=""
		else
			func_enable_kernel_param "CONFIG_RT_FIRST_IF_RT2860"
			func_disable_kernel_param "CONFIG_RT_FIRST_IF_MT7620"
			CONFIG_RT_FIRST_IF_RT2860=y
		fi
	fi
	if [ "$CONFIG_RT_FIRST_IF_RT2860" = "y" ] ; then
		cp -rfL "$dir_wifi_src/rtsoc/$dir_wifi_ver/rt2860v2" "$dir_wifi_dst/"
		cp -rfL "$dir_wifi_src/rtsoc/$dir_wifi_ver/rt2860v2_ap" "$dir_wifi_dst/"
	fi
fi
if [ -n "$CONFIG_RT3090_AP" ] ; then
	dir_wifi_ver="2.7.X.X"
	if [ "$CONFIG_FIRMWARE_WIFI2_DRIVER" = "2.5" ] ; then
		dir_wifi_ver="2.5.X.X"
	fi
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt3090" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt3090_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_RT5392_AP" ] ; then
	dir_wifi_ver="2.7.X.X"
	if [ "$CONFIG_FIRMWARE_WIFI2_DRIVER" = "2.5" ] ; then
		dir_wifi_ver="2.5.X.X"
	fi
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt5392" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt5392_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_RT5592_AP" ] ; then
	dir_wifi_ver="2.7.X.X"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt5592" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt5592_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_RT3593_AP" ] ; then
	dir_wifi_ver="2.7.X.X"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt3593" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/rt3593_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_MT7610_AP" ] ; then
	dir_wifi_ver="3.0.X.X"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt7610" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt7610_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_MT76X2_AP" ] ; then
	dir_wifi_ver="3.0.X.X"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt76x2" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt76x2_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_MT76X3_AP" ] ; then
	dir_wifi_ver="4.1.X.X"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt76x3" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt76x3_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_MT7628_AP" ] ; then
	dir_wifi_ver="4.1.X.X"
	cp -rfL "$dir_wifi_src/rtsoc/$dir_wifi_ver/mt7628" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtsoc/$dir_wifi_ver/mt7628_ap" "$dir_wifi_dst/"
fi
if [ -n "$CONFIG_MT7615_AP" ] ; then
	dir_wifi_ver="5.0.3.0"
	if [ "$CONFIG_FIRMWARE_WIFI_DRIVER" = "4.4.2.1" ] ; then
	dir_wifi_ver="4.4.2.1"
	fi
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt7615" "$dir_wifi_dst/"
	cp -rfL "$dir_wifi_src/rtpci/$dir_wifi_ver/mt7615_ap" "$dir_wifi_dst/"
fi
############################ HWNAT ####################################
dir_ppe_src="$ROOTDIR/proprietary/rt_ppe"
dir_ppe_dst="$ROOTDIR/$CONFIG_LINUXDIR/net/nat"
rm -rf "$dir_ppe_dst/hw_nat"
cp -rf "$dir_ppe_src/hw_nat" "$dir_ppe_dst/"
############################ EIP93 ####################################
dir_eip_src="$ROOTDIR/proprietary/rt_eip"
dir_eip_dst="$ROOTDIR/$CONFIG_LINUXDIR/drivers/net"
if [ "$CONFIG_PRODUCT" = "MT7621" ] ; then
	if [ -d "$dir_eip_src" ] ; then
		rm -rf "$dir_eip_dst/rt_eip"
		cp -rf "$dir_eip_src" "$dir_eip_dst/"
	fi
fi
############################# CPU #####################################
if [ "$CONFIG_FIRMWARE_CPU_SLEEP" = "y" -o "$CONFIG_RALINK_SYSTICK_COUNTER" = "y" ] ; then
	func_enable_kernel_param "CONFIG_RALINK_SYSTICK_COUNTER"
	func_enable_kernel_param "CONFIG_RALINK_CPUSLEEP"
	func_enable_kernel_param "CONFIG_HZ_1000"
	func_disable_kernel_param "CONFIG_HZ_250"
	func_disable_kernel_param "CONFIG_HZ_100"
	func_disable_kernel_param "CONFIG_CLKSRC_MIPS_GIC"
	func_disable_kernel_param "CONFIG_HIGH_RES_TIMERS"
fi
if [ "$CONFIG_RALINK_MT7620" = "y" ] ; then
	if [ "$CONFIG_FIRMWARE_CPU_600MHZ" = "y" ] ; then
		func_enable_kernel_param "CONFIG_RALINK_MT7620_PLL600"
	fi
fi
if [ "$CONFIG_RALINK_MT7621" = "y" ] ; then
	if [ "$CONFIG_FIRMWARE_CPU_900MHZ" = "y" ] ; then
		func_enable_kernel_param "CONFIG_RALINK_MT7621_PLL900"
	fi
	if [ "$CONFIG_FIRMWARE_RAM_MOD_256" = "y" ] ; then
		func_disable_kernel_param "CONFIG_RT2880_DRAM_64M"
		func_disable_kernel_param "CONFIG_RT2880_DRAM_128M"
		func_enable_kernel_param "CONFIG_RT2880_DRAM_256M"
	fi
fi
############################# SMP #####################################
if [ -n "$CONFIG_SMP" ] ; then
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_CPU"
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_PROCESS"
fi
############################# RTC #####################################
if [ -n "$CONFIG_RTC_CLASS" ] ; then
	func_enable_busybox_param "CONFIG_HWCLOCK"
fi
############################# IPV6 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_IPV6" != "y" ] ; then
	func_disable_kernel_param "CONFIG_INET_TUNNEL"
	func_disable_kernel_param "CONFIG_IPV6"
	func_disable_libc_param "UCLIBC_HAS_IPV6"
	func_disable_busybox_param "CONFIG_PING6"
	func_disable_busybox_param "CONFIG_FEATURE_IPV6"
	func_disable_busybox_param "CONFIG_FEATURE_PREFER_IPV4_ADDRESS"
	func_disable_busybox_param "CONFIG_TRACEROUTE6"
	func_disable_busybox_param "CONFIG_FEATURE_UDHCP_RFC5969"
	func_disable_busybox_param "CONFIG_DHCP6C"
	func_enable_busybox_param "CONFIG_IP"
	func_enable_busybox_param "CONFIG_FEATURE_IP_ADDRESS"
	func_enable_busybox_param "CONFIG_FEATURE_IP_LINK"
	func_enable_busybox_param "CONFIG_FEATURE_IP_ROUTE"
fi
#SFE
if [ "$CONFIG_FIRMWARE_INCLUDE_SFE" = "y" ] ; then
	func_enable_kernel_param "CONFIG_SHORTCUT_FE"
else
	func_disable_kernel_param "CONFIG_SHORTCUT_FE"
fi
############################# USB #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
# 	func_disable_kernel_param "CONFIG_SWAP"
# 	func_disable_kernel_param "CONFIG_FAT_FS"
# 	func_disable_kernel_param "CONFIG_MSDOS_FS"
# 	func_disable_kernel_param "CONFIG_VFAT_FS"
# 	func_disable_kernel_param "CONFIG_UFSD_FS"
# 	func_disable_kernel_param "CONFIG_EXFAT_FS"
# 	func_disable_kernel_param "CONFIG_EXT2_FS"
# 	func_disable_kernel_param "CONFIG_EXT3_FS"
# 	func_disable_kernel_param "CONFIG_EXT4_FS"
# 	func_disable_kernel_param "CONFIG_JBD"
# 	func_disable_kernel_param "CONFIG_JBD2"
# 	func_disable_kernel_param "CONFIG_XFS_FS"
# 	func_disable_kernel_param "CONFIG_FUSE_FS"
# 	func_disable_kernel_param "CONFIG_FSCACHE"
# 	func_disable_kernel_param "CONFIG_INOTIFY_USER"
# 	func_disable_kernel_param "CONFIG_NFSD"
# 	func_disable_kernel_param "CONFIG_PARTITION_ADVANCED"
# 	func_disable_kernel_param "CONFIG_NLS_CODEPAGE_866"
# 	func_disable_kernel_param "CONFIG_NLS_ISO8859_1"
# 	func_disable_kernel_param "CONFIG_SCSI"
# 	func_disable_kernel_param "CONFIG_SCSI_MOD"
# 	func_disable_kernel_param "CONFIG_INPUT"
# 	func_disable_kernel_param "CONFIG_USB_SUPPORT"
# 	func_disable_kernel_param "CONFIG_HID_SUPPORT"
# 	func_disable_kernel_param "CONFIG_MEDIA_SUPPORT"
# 	func_disable_kernel_param "CONFIG_CRC16"
# 	func_disable_kernel_param "CONFIG_NETFILTER_FP_SMB"
# 	func_disable_kernel_param "CONFIG_RT3XXX_EHCI_OHCI"
	func_disable_busybox_param "CONFIG_FDISK"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_WRITABLE"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_ADVANCED"
	func_disable_busybox_param "CONFIG_MICROCOM"
	func_disable_busybox_param "CONFIG_EJECT"
	func_disable_busybox_param "CONFIG_FEATURE_EJECT_SCSI"
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_FAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_NTFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_LINUXSWAP"
#	if [ "$CONFIG_FIRMWARE_INCLUDE_OPENVPN" != "y" ] ; then
#		func_disable_kernel_param "CONFIG_TUN"
#		func_disable_kernel_param "CONFIG_HOTPLUG"
#	fi
	CONFIG_FIRMWARE_INCLUDE_NFSD=n
else
############################# UFSD ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_UFSD" != "y" ] ; then
	func_disable_kernel_param "CONFIG_UFSD_FS"
fi
if [ "$CONFIG_FIRMWARE_ENABLE_UFSD" != "y" ] || [ $paragon_hfsplus -eq 0 ] ; then
	func_disable_kernel_param "CONFIG_MAC_PARTITION"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
fi
############################# FAT #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FAT" != "y" ] ; then
	func_disable_kernel_param "CONFIG_FAT_FS"
	func_disable_kernel_param "CONFIG_MSDOS_FS"
	func_disable_kernel_param "CONFIG_VFAT_FS"
fi
############################ exFAT ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXFAT" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXFAT_FS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
fi
############################# EXT2 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT2" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT2_FS"
fi
############################# EXT3 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT3" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT3_FS"
fi
############################# EXT4 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT4" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT4_FS"
fi
############################# XFS #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_XFS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_XFS_FS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
fi
############################# FUSE ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FUSE" != "y" ] ; then
	func_disable_kernel_param "CONFIG_FUSE_FS"
fi
############################# SWAP ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_SWAP" != "y" ] ; then
	func_disable_kernel_param "CONFIG_SWAP"
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
fi
############################# NFSD ####################################
# if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" ] ; then
#	func_disable_kernel_param "CONFIG_NFSD"
# fi
############################# UVC #####################################
#if [ "$CONFIG_FIRMWARE_INCLUDE_UVC" != "y" ] ; then
#	func_disable_kernel_param "CONFIG_MEDIA_SUPPORT"
#fi
############################# HID #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_HID" != "y" ] ; then
	func_disable_kernel_param "CONFIG_INPUT"
	func_disable_kernel_param "CONFIG_HID_SUPPORT"
	func_disable_kernel_param "CONFIG_USB_HID"
fi
############################# UART ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_SERIAL" != "y" ] ; then
	func_disable_kernel_param "CONFIG_USB_SERIAL_CH341"
	func_disable_kernel_param "CONFIG_USB_SERIAL_PL2303"
fi
fi
############################# XFRM ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_SSWAN" = "y" ] ; then
	CONFIG_FIRMWARE_INCLUDE_XFRM=y
fi
if [ "$CONFIG_PRODUCT" = "MT7621" ] ; then
if [ "$CONFIG_FIRMWARE_INCLUDE_XFRM" != "y" ] ; then
	func_disable_kernel_param "CONFIG_XFRM"
	func_disable_kernel_param "CONFIG_XFRM_USER"
	func_disable_kernel_param "CONFIG_XFRM_IPCOMP"
	func_disable_kernel_param "CONFIG_NET_KEY"
	func_disable_kernel_param "CONFIG_INET_AH"
	func_disable_kernel_param "CONFIG_INET_ESP"
	func_disable_kernel_param "CONFIG_INET_IPCOMP"
	func_disable_kernel_param "CONFIG_INET_XFRM_TUNNEL"
	func_disable_kernel_param "CONFIG_INET_XFRM_MODE_TRANSPORT"
	func_disable_kernel_param "CONFIG_INET_XFRM_MODE_TUNNEL"
	func_disable_kernel_param "CONFIG_INET_XFRM_MODE_BEET"
	func_disable_kernel_param "CONFIG_INET6_AH"
	func_disable_kernel_param "CONFIG_INET6_ESP"
	func_disable_kernel_param "CONFIG_INET6_IPCOMP"
	func_disable_kernel_param "CONFIG_INET6_XFRM_TUNNEL"
	func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_TRANSPORT"
	func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_TUNNEL"
	func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_BEET"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_MATCH_ESP"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_MATCH_POLICY"
	func_disable_kernel_param "CONFIG_IP_NF_MATCH_AH"
	func_disable_kernel_param "CONFIG_IP6_NF_MATCH_AH"
	func_disable_kernel_param "CONFIG_IPV6_MULTIPLE_TABLES"
	func_disable_kernel_param "CONFIG_CRYPTO_AEAD"
	func_disable_kernel_param "CONFIG_CRYPTO_AEAD2"
	func_disable_kernel_param "CONFIG_CRYPTO_AUTHENC"
	func_disable_kernel_param "CONFIG_CRYPTO_CBC"
	func_disable_kernel_param "CONFIG_CRYPTO_HMAC"
	func_disable_kernel_param "CONFIG_CRYPTO_MD5"
	func_disable_kernel_param "CONFIG_CRYPTO_SHA256"
	func_disable_kernel_param "CONFIG_CRYPTO_AES"
	func_disable_kernel_param "CONFIG_CRYPTO_DES"
	func_disable_kernel_param "CONFIG_CRYPTO_DEFLATE"
fi
fi
############################ IPSET ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IPSET" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NETFILTER_NETLINK"
fi
############################# QOS #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_QOS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NET_SCHED"
	func_disable_kernel_param "CONFIG_NET_CLS"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_CLASSIFY"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
	func_disable_kernel_param "CONFIG_IMQ"
fi
############################# IMQ #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IMQ" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
	func_disable_kernel_param "CONFIG_IMQ"
fi
############################# IFB #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IFB" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NET_SCH_INGRESS"
	func_disable_kernel_param "CONFIG_NET_CLS_ACT"
	func_disable_kernel_param "CONFIG_IFB"
fi
############################# NFSC ####################################
#if [ "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" ] ; then
#	func_disable_kernel_param "CONFIG_FSCACHE"
#	func_disable_kernel_param "CONFIG_NFS_FS"
#fi
############################# CIFS ####################################
# if [ "$CONFIG_FIRMWARE_INCLUDE_CIFS" != "y" ] ; then
# 	func_disable_kernel_param "CONFIG_CIFS"
# 	func_disable_busybox_param "CONFIG_FEATURE_MOUNT_CIFS"
# fi
# if [ "$CONFIG_FIRMWARE_INCLUDE_SMBD" != "y" ] ; then
# 	func_disable_kernel_param "CONFIG_NETFILTER_FP_SMB"
# fi
# if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" -a "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" -a "$CONFIG_FIRMWARE_INCLUDE_CIFS" != "y" ] ; then
# 	func_disable_kernel_param "CONFIG_NETWORK_FILESYSTEMS"
# 	if [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
# 		func_disable_kernel_param "CONFIG_NLS"
# 		func_disable_kernel_param "CONFIG_LBDAF"
# 	fi
# fi
############################# USB AUDIO ###############################
# if [ "$CONFIG_FIRMWARE_INCLUDE_AUDIO" != "y" ] || [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
# 	func_disable_kernel_param "CONFIG_FW_LOADER"
# 	func_disable_kernel_param "CONFIG_SOUND"
# fi
#######################################################################
if [ "$CONFIG_WITHOUT_KERNEL" != "y" ] ; then
echo --------------------------MAKE-DEP--------------------------------
make dep
fi
if [ "$2" != "kmod" ] ; then
echo --------------------------MAKE-ALL--------------------------------
make
fi
